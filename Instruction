# Что такое Github?


Github - это одна из реализаций распределенных систем контроля версий, имеющая как и локальные, так и удаленные репозитории. Является самой популярной реализацией систем контроля версий в мире.

## Подготовка репозитория 

Для создания репозитория необходимо выполнить команду *git init* в папке с репозиторием.

## Git add

Для добавления изменений в коммит используется команда *git add*. Чтобы использовать команду *git add*, напишите *git add <имя файла>*.

## Создание коммитов

Для того, чтобы создать коммит (сохранение), необходимо выполнить команду *git commit -m "Сообщение"*.

## Создание ветки

Для того, чтобы создать ветку, нужно использовать *git branch <имя ветки>* или *git checkout -b <имя ветки>*.

## Переключение с ветки на ветку

Чтобы переключиться с одной ветки на другую, необходимо вызвать команду *git checkout <имя ветки>*.

## Совмещение двух вариантов текста

Чтобы слить любую ветку с текущей, вызываем *git merge <имя ветки для слияния с текущей>*.

## Удаление веток

Чтобы удалить не нужную ветку, необходимо вызвать команду *git branch -d <имя ветки, которую хотим удалить>*.

## Добавление изображения

В Git не принято добавлять файлы изображений, их хранят на cторонних носителях. Чтобы исключить ненужные файлы из
загрузки, есть команда *git ignore*.

## Конфликт изменений

При работе в двух ветках одновременно может возникнуть ситуация, когда в одной и другой ветке мы по-разному изменили блок текста. Если затем мы попробуем слить эти ветки, Git сообщит о конфликте и предложит выбрать, какие же изменения записать. 
Поэтому у проекта в репозитории должен быть один ответственный пользователь, наделённый правом проводить слияния и разрешать конфликты.

## Визуализация всех веток

Чтобы отобразить коммиты в виде дерева, нужно вызвать команту *git log --graph*

# Инструкция для работы с удаленными репозиториями в git


## Как настроить совместную работу 
1. Создать аккаунт на Github.com
2. Создать локальный репозиторий
3. "Подружить" ваш локальный и удаленный репозитории. Github при создании нового реопзитория подскажет как это можно сделать)
4. Отправить (push) ваш локальный репозиторий в удаленный (на Github), при этом вам, возможно, нужно будет авторизоваться на удаленном репозитории.
5. Провести изменения "с другого компьютера".
6. Выкачать (pull) актуальное состояние из удаленного репозитория.

## Как сделать pull request
* Делаем fork репозитория
* Делаем clone СВОЕЙ версии репозитория
* Создаем новую ветку и в НЕЕ вносим свои изменения
* Фиксируем изменения (делаем коммиты)
* Отправляем свою версию в свой GitHub
* На сайте GitHub нажимаем кнопку pull request 

# Инструкция для работы с Markdown

## Выделение текста

### Курсив

Чтобы выделить текст курсивом необходимо обрамить его звездочками (*) или знаком нижнего подчеркивания (_). Например, *вот так* или _вот так_.

### Полужирный

Чтобы выделить текст полужирным необходимо обрамить его двойными звездочками (**) или двойным знаком нижнего подчеркивания (__). Например, **вот так** или __вот так__.

Альтернативные способы выделения текста жирным или курсивом нужны для того, чтобы мы могли совмещать оба этих способа. Например, _текст может быть выделени курсивом и при этом быть **полужирным**_.

### Зачеркнутый

Чтобы зачеркнуть текст, необходимо обрамить его двойной волнистой линией (~~). Например, ~~вот так~~.

## Списки

### Ненумерованный

Чтобы добавить ненумерованные списки необходимо пункты выделить звездочкой (*) или знаком + или знаком -. Например, вот так:
* Элемент 1
* Элемент 2
* Элемент 3
+ Элемент 4
- Элемент 5

### Нумерованный

Чтобы добавить нумеровнные списки, необходимо пункты просто пронумеровать. Например, вот так:
1. Первый пункт
2. Второй пункт

При этом, нумерация автоматическая: можно вставить любые цифры. Например, вот так:
1. Первый пункт
1. Второй пункт

### Многоуровневый
Чтобы оформить многоуровневый список, необходимо выделить табуляцией каждый новый подпункт. Например, вот так:
- Пункт 1
   - Подпункт А
        - Подпункт а

## Работа с изображениями

Чтобы вставить изображение в текст, достаточно написать следующее:
![Привет, это картинка!](Картинка.jpg)

или 

![Привет, это картинка!](Картинка.jpg "Лого VS Code")

## Ссылки

1. Чтобы поставить гиперссылку без анкора, нужно взять URL в угловые скобки. С e-mail – аналогично. Например, вот так:

- <https://code.visualstudio.com/> - это безанкорная ссылка.

2. Если вставлять с анкором, то тогда текст ссылки заключается в квадратные скобки, а адрес страницы – в круглые. Например, вот так:

+ [Эта ссылка](https://code.visualstudio.com/) без заголовка.

3. Рядом с URL можно прописать тайтл, его объявляют в кавычках (он тоже остается внутри круглых скобок). Например, вот так:

* Это [ссылка](https://code.visualstudio.com "Visual Studio Code") с тайтлом.

## Таблицы

Для добавления таблицы используется вертикальная черта (|) и дефис (-). Дефисы работают примерно так же, как в случае с горизонтальной линией: отделяют заголовки от других строк, при этом количество символов значения не имеет. Вертикальная черта служит границей между столбцами. Например, вот так:

| Язык | Метка |
| --| -- |
| Java Script | javascript |
| C++ |cpp|
| HTML|html|
|Markdown|md|
|JSON|json|
|Python|python|
|SQL|sql|

## Цитаты

Для добавления цитаты, необходимо добавить в начале угловую скобку (>). Например, вот так:
> Привет! Это цитата

Цитаты вкладываются как в списки, так и в другие цитаты. Цитаты также могут включать в себя заголовки, списки и код. Например, вот так:

> Цитата
> > Вложенная цитата
>>> Третьеуровневая цитата
>>>> ##### Заголовок 5
>>>> * Пункт списка

## Заключение

Чтобы спецсимволы не исчезали и не влияли на оформление, нужно использовать __экранирование__. Как и во многих других языках программирования, этим целям служит обратная косая черта (бэкслеш). Например, так:

\*Нет курсива\*

\*\* Нет жирного выделения \*\*

\#Никаких заголовков Н1\#

