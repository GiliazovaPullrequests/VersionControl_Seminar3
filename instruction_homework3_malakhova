# Начальная работа с системой контроля версий Git

*git --version* - команда для проверки версий Git

*git init* -  инициализация пустого репозитория

*git status* - проверка текущего состояния файлов

*git add имя_файла.расширение* - добавление версионности файлу

*git commit -m "Message" - команда для фикации изменений файлов

*git log* - вывод истории коммитов в хронологическом порядке

*git diff* -  вывод изменений на текущий момент по отношению к последнему коммиту.

*git checkout master/main/название_ветки/хэш-номер_коммита* - переход между изменениями или возврат к текущему состоянию

# Домашнее задание

![мем](мем.jpg)

> Git - это распределённая система управления версиями.

## Git: состояния файлов

| Наименивание | Обозначение |
|:------------|:-----------:|
| Untracked | Неотслеживаемый |
| Staged | Подготовленный |
| Unomodified | Зафиксированный |
| Modifiedn | Изменённый |
| Add file  | 
| Stage file | Планирование для включения в фиксацию |
| Edit file | Изменение файла |
| Remove file | Удаление из-под верс. контр. |
| Commit | Фиксация |

## Дополнительные команды:
+ *git branch* - посмотреть список веток в репозитории
+ *git branch <название ветки>* - создать новую ветку
+ *git checkout <название ветки>* - переход к другой ветке
+ *git branch -d <название ветки>* - удалить ветку

![мем2](мем2.jpg) 

[Установка Git](https://git-scm.com/book/ru/v2/Введение-Установка-Git) 

# Семинар 2

## Домашняя работа

### Что такое Git?

Git - это одна из реализаций распределённых систем контроля версий, имеющая как локальные, так и удалённые репозитории. Является самой популярной реализацией систем контроля версий в мире.

### Подготовка репозитория

Для создания репозитория необходимо выполнить команду *git init* в папке с репозиторием.

### Git add

Для добавления изменений в коммит используется команда *git add*, напишите *git add <имя файла>*, или *git add .* - для сохранения всех файлов, или *git commit -am "имя коммита"* - для сохраниения всех файлов одной командой.

### Создание коммитов

Для того, чтобы создать коммит, нобходимо выполнить команду *git commit -m "Сообщение"*.

### Создание ветки

Для того, чтобы создать ветку, нужно использовать *git branch <имя ветки>* или *git checkout -b <имя ветки>*.

### Конфликт 

Если две ветки имеют разное содержание в одном фрагменте текста, то возникоет конфликт. Конфликт можно разрешить вручную. 

Проведём эксперемент по созданию конфликта на примере набора чисел:

123456789 45637264

# *Пара-пара-пам! Всё!*

P.S. Не совсем всё. Мем забыла.

![мем3](мем3.jpg) 

### P.P.S. Вот теперь всё))

# Семинар 3
# Работа с удалёнными репозиториями

_*Удалённый репозиторий*_ - это репозиторий, который находится не на нашем компьютере, то есть - удалённо. 

__GitHub__ - сервис компании Microsoft, который позволяет интегрироваться с программой *Git* и настроить удалённую работу с репозиторием. 

## Git or GitHub

|Git      | GitHub
|:-------:|:-------:|
|*Git* - одна из систем контроля версий | *GitHub* - самый популярный сервис Git|
| Способ организации и поддержания версионности| Много полезных функций|
| Самая популярная система контроля версий| Огромный архив различного кода|

## Основные команды 

+ *git clone <ссылка на удалённый репозиторий>* - добавление удалённой папки
+ *cd <название папки>* - поменять местоположение (переход в папку)
+ *git push* - сохранение информации из локального репозитория в GitHub
+ *git pull* - перенесение информации из удалённого в локальный репозиторий

![мем4](мем4.jpg) 

# Спасибо за внимание!
